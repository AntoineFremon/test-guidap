openapi: "3.0.2"
info:
  title: API Bases de loisir
  version: "0.1"
servers:
  - url: http://localhost:8000
paths:
  /activities/:
    post:
      summary: Create a new activity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        '201':
          description: Activity successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          $ref: '#/components/responses/MissingRequiredField'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    get:
      summary: Get all activities
      security: []
      responses:
        '200':
          description: All activities fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /leisures/:
    post:
      summary: Create a new leisure base
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Leisure'
      responses:
        '201':
          description: Leisure base successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leisure'
        '400':
          $ref: '#/components/responses/MissingRequiredField'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    get:
      summary: Get a list of leisure bases
      security: []
      parameters:
        - in: query
          name: pageSize
          description: Number of leisure bases to return
          required: false
          schema:
            type: integer
            minimum: 0
            default: 20
        - in: query
          name: offset
          description: Number of leisure bases to start the query from
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: The list of leisure bases asked for
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leisure'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /leisures/{id}:
    put:
      summary: Update a leisure base
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Leisure'
      responses:
        '200':
          description: The leisure base was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leisure'
        '404':
          description: The leisure base with the given id was not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete a leisure base
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The leisure base was successfully deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'

  /users/:
    get:
      summary: Get a list of all users
      responses:
        '200':
          description: Lists all saved users
          content:
            application/json:
              schema:
                type: array
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  username:
                    type: string
                    example: antoineadmin
                  fistname:
                    type: string
                    example: Antoine
                  lastname:
                    type: string
                    example: FREMON
                  email:
                    type: string
                    example: antoine@guidap.co
                  role:
                    type: string
                    example: admin
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - firstname
                - lastname
                - password
              properties:
                username: string
                email: string
                firstname: string
                lastname: string
                password: string
                role: string
      responses:
        '201':
          description: User successfully created
        '400':
          $ref: '#/components/responses/MissingRequiredField'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/UnexpectedError'
  /users/login:
    post:
      summary: Verifies the given login and password and returns the user info with a jwt. Used for authentication to the API.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login: string
                password: string
      responses:
        '200':
          description: User successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  username:
                    type: string
                    example: antoineadmin
                  fistname:
                    type: string
                    example: Antoine
                  lastname:
                    type: string
                    example: FREMON
                  email:
                    type: string
                    example: antoine@guidap.co
                  token:
                    type: string
                  tokenExpiration:
                    type: string
                    example: 2023-03-05T19:42:00.000Z
                  role:
                    type: string
                    example: admin
          links:
            GetJWT:
              description: Token used to authenticate to the API
              operationId: getToken
              parameters:
                token: $response.body.token

        '400':
          $ref: '#/components/responses/MissingRequiredField'
        '422':
          description: The given login and password do not match
        '500':
          $ref: '#/components/responses/UnexpectedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    MissingRequiredField:
      description: Missing a required field in the request
    UnexpectedError:
      description: Unexpected error, can be from the API itself or the database
  schemas:
    Activity:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
        photoUrl:
          type: string
    Leisure:
      type: object
      required:
        - name
        - address
        - coordinates
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: string
        coordinates:
          type: string
        webLink:
          type: string
        activitiesId:
          type: array

security:
- BearerAuth: []
